#!/usr/bin/env python3
"""benchmark

Usage:
  snake.py [-n <loops>] [--git] [--tag] [--push] [<file>]
  snake.py (-h | --help)
  snake..py --version

Options:
  -h --help             Show this screen
  --version             Show version

  --git                 Get code from git and run that
  --tag                 Add a tag with the result to git (implies --git)
  --push                Push result tag to remote (implies --tag)
  -n --loops <loops>    Number of benchmark runs [Default: 1]
  <file>                Which file to run
"""
from docopt import docopt
import os
import sys
import subprocess
import platform
import re

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def error(str):
    eprint(str)
    sys.exit(1)

def run(*cmd, output_mandatory=True, **kwargs):
    cmd_str = " ".join(cmd)
    # print("Running", cmd_str)

    pipes = {
        "stdout": subprocess.PIPE,
        "stderr": subprocess.PIPE,
    }
    if "input" in kwargs:
        pipes["stdin"] = subprocess.PIPE
    proc = subprocess.Popen(cmd, **pipes)
    out, err = proc.communicate(**kwargs)
    if err:
        eprint(err.decode("utf-8"))
    if proc.returncode:
        error("Unexpected exit code %d from '%s'" % (proc.returncode, cmd_str))
    if err:
        error("Unexpected error output from '%s'" % cmd_str)
    if output_mandatory and not out:
        error("No output from %s" % cmd_str)
    return out

def benchmark(file, loops=1, git=False, tag=False, push=False):
    if push:
        tag = True
    if tag:
        git = True

    tmp_file = "%s.git" % file
    if git:
        out = run("git", "show", "HEAD:" + file)
        with open(tmp_file, "wb") as file:
            file.write(out)
        file = tmp_file

    env = os.environ
    env["PYTHONHASHSEED"] = "1"
    speed = -1
    for i in range(loops):
        s = run("taskset", "-c", "1", "python", file, "--benchmark")
        s = int(s)
        print("Speed: %d steps/sec" % s)
        if s > speed:
            speed = s
    if loops > 1:
        print("Best speed: %d steps/sec" % speed)

    if tag:
        hostname = platform.node()
        prefix = "bench-" + hostname + "="
        matcher = r"%s(\d+)" % re.escape(prefix)
        tags = run("git", "tag", "--points-at", "HEAD", "-l", prefix + "*",
                   output_mandatory = False).decode("utf-8")
        delete = []
        keep = None
        for tag in tags.splitlines():
            match = re.fullmatch(matcher, tag)
            if match:
                old_speed = int(match.group(1))
                if old_speed >= speed:
                    if keep is not None:
                        delete.append(keep)
                    speed = old_speed
                    keep = tag
                else:
                    delete.append(tag)

            else:
                eprint("Warning: ignoring tag ", tag)

        if delete:
            print("deleting tags", delete)
            if push:
                run("git", "push", "origin", "--delete", *delete,
                    output_mandatory = False)
            run("git", "tag", "-d", *delete)
        if keep is None:
            tag = prefix + str(speed)
            print("Setting tag", tag)
            run("git", "tag", tag)
            if push:
                run("git", "push", "origin", tag)
        else:
            print("Keeping tag", keep)

        os.remove(tmp_file)

if __name__ == '__main__':
    arguments = docopt(__doc__, version='Benchmark 1.0')
    # print(arguments)

    file = arguments["<file>"]
    if file is None:
       file = "snake.py"
    benchmark(file,
              git=arguments["--git"],
              tag=arguments["--tag"],
              push=arguments["--push"],
              loops=int(arguments["--loops"]))
