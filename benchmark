#!/usr/bin/env python3
"""benchmark

Usage:
  snake.py [-n <loops>] [--git] [--tag] [--push] [<file>]
  snake.py (-h | --help)
  snake..py --version

Options:
  -h --help             Show this screen
  --version             Show version

  --git                 Get code from git and run that
  --tag                 Add a tag with the result to git (implies --git)
  --push                Push result tag to remote (implies --tag)
  -n --loops <loops>    Number of benchmark runs [Default: 1]
  <file>                Which file to run
"""
from docopt import docopt
import os
import sys
import subprocess
import platform
import re
import socket
import urllib.parse
import tempfile

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def error(str):
    eprint(str)
    sys.exit(1)

def run(*cmd, output_mandatory=False):
    cmd_str = " ".join(cmd)
    # print("Running", cmd_str)

    proc = subprocess.run(cmd, capture_output = True)
    if proc.stderr:
        eprint(proc.stderr.rstrip().decode())
    if proc.returncode:
        error("Unexpected exit code %d from '%s'" % (proc.returncode, cmd_str))
    #if proc.stderr:
    #    error("Unexpected error output from '%s'" % cmd_str)
    if output_mandatory and not proc.stdout:
        error("No output from %s" % cmd_str)
    return proc.stdout

def git_export(dir):
    p1 = subprocess.Popen(["git", "archive", "HEAD"],
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    p2 = subprocess.Popen(["tar", "-C", dir, "-x"],
                          stdin=p1.stdout,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    tar_out,tar_err = p2.communicate()
    # This reads from the inbetween pipe, but p2 will have drained it
    # (and p1.stdout.close does nothing)
    git_out,git_err = p1.communicate()
    if git_err:
        eprint(git_err.decode())
    if tar_err:
        eprint(tar_err.decode())
    if p1.returncode:
        error("Unexpected exit code %d from 'git archive'" % p1.returncode)
    if p2.returncode:
        error("Unexpected exit code %d from 'tar -x'" % p2.returncode)
    if tar_out:
        error("Unexpected STDOUT from 'tar -x'")
    if git_out:
        error("Unexpected STDOUT reamining for 'git archive'")

def get_response(handle):
    code = None
    response = ""
    while True:
        line = handle.readline()
        if line is "":
            raise(RuntimeError("Git-ExportDaemon closed the connection"))
        line = line.rstrip()
        m = re.fullmatch(r"([0-9]{3})([- ])(.*)", line)
        if m is None:
            raise(RuntimeError("Invalid response from Git-ExportDaemon: " + line))
        (c, separator, rest) = m.groups()
        if code is None:
            code = c
        elif code != c:
            raise(RuntimeError("Inconsistent response code from Git-ExportDaemon"))
        response += rest + "\n"
        if separator == " ":
            break

    response = response.rstrip()
    return code, response

def escape(str):
    # quote() already does a encode("utf-8") on the input
    return urllib.parse.quote(str)

def unescape(str):
    return urllib.parse.unquote(str)

NAME_SOCKET = "S.git-exportd"
CODE_GREETING = "220"
CODE_EXPORTED = "251"
def daemon_export(repo):
    repo = os.path.join(os.getcwd(), repo)

    runtime_dir = os.getenv("XDG_RUNTIME_DIR")
    if not runtime_dir:
        runtime_dir = "/run/user/%d" % os.getuid()
    path_socket = os.path.join(runtime_dir, "Git-ExportDaemon", NAME_SOCKET)
    client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    try:
        client.connect(path_socket)
    except:
        return None

    # We are really reading/writing bytes, but escape() and unescape() already
    # do the needed encode() and decode() so it works out
    handle = client.makefile("rw")

    code, response = get_response(handle)
    if code != CODE_GREETING:
        raise(RuntimeError("Unexpected greeting from Git-ExportDaemon: %s %s" %
                           (code, response)))

    handle.write("export %s\n" % escape(repo))
    handle.flush()
    code, response = get_response(handle)
    if code != CODE_EXPORTED:
        raise(RuntimeError("Unexpected export response from Git-ExportDaemon: %s %s" % (code, response)))

    handle.write("quit\n")
    handle.flush()

    m = re.fullmatch(r"([0-9][0-9]*|0)\s+([0-9a-f]{40})\s+(\S+)", response)
    if m is None:
        raise(RuntimeError("Could not parse export response from Git-ExportDaemon: %s %s" % (code, response)))
    uid, revision, path = m.groups()
    # For the moment we only return path
    return unescape(path)

def benchmark(file, loops=1, git=False, tag=False, push=False):
    if push: tag = True
    if tag:  git = True

    tmp_dir = None;
    if git:
        path_export = daemon_export(".")
        if path_export is None:
            tmp_dir = tempfile.TemporaryDirectory(prefix="git_export.nnsnake.")
            path_export = tmp_dir.name
            print("No export daemon, Falling back to manual git extract to " + path_export)
            git_export(path_export)
        file = os.path.join(path_export, file)

    env = os.environ
    env["PYTHONHASHSEED"] = "1"
    speed = -1
    for i in range(loops):
        s = run("taskset", "-c", "1", "python", file, "benchmark",
                output_mandatory = True)
        s = int(s)
        print("Speed: %d steps/sec" % s)
        if s > speed:
            speed = s
    if loops > 1:
        print("Best speed: %d steps/sec" % speed)

    if tag:
        hostname = platform.node()
        prefix = "bench-" + hostname + "="
        matcher = r"%s(\d+)" % re.escape(prefix)
        tags = run("git", "tag", "--points-at", "HEAD", "-l", prefix + "*").decode()
        delete = []
        keep = None
        for tag in tags.splitlines():
            match = re.fullmatch(matcher, tag)
            if match:
                old_speed = int(match.group(1))
                if old_speed >= speed:
                    if keep is not None:
                        delete.append(keep)
                    speed = old_speed
                    keep = tag
                else:
                    delete.append(tag)

            else:
                eprint("Warning: ignoring tag ", tag)

        if delete:
            print("deleting tags", delete)
            if push:
                run("git", "push", "origin", "--delete", *delete)
            run("git", "tag", "-d", *delete)
        if keep is None:
            tag = prefix + str(speed)
            print("Setting tag", tag)
            run("git", "tag", tag)
            if push:
                run("git", "push", "origin", tag)
        else:
            print("Keeping tag", keep)

if __name__ == '__main__':
    arguments = docopt(__doc__, version='Benchmark 1.0')
    # print(arguments)

    file = arguments["<file>"]
    if file is None:
       file = "snake.py"
    benchmark(file,
              git=arguments["--git"],
              tag=arguments["--tag"],
              push=arguments["--push"],
              loops=int(arguments["--loops"]))
